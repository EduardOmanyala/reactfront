{"ast":null,"code":"const API_BASE_URL = 'http://127.0.0.1:8000/api';\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('access_token');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && {\n      'Authorization': `Bearer ${token}`\n    })\n  };\n};\n\n// Login API\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/login/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Login failed');\n    }\n\n    // Store tokens\n    localStorage.setItem('access_token', data.access);\n    localStorage.setItem('refresh_token', data.refresh);\n    localStorage.setItem('user', JSON.stringify(data.user));\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Register API\nexport const register = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/register/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Registration failed');\n    }\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Logout API\nexport const logout = async () => {\n  try {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (refreshToken) {\n      await fetch(`${API_BASE_URL}/logout/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refresh: refreshToken\n        })\n      });\n    }\n  } catch (error) {\n    console.error('Logout error:', error);\n  } finally {\n    // Clear local storage regardless of API call success\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user');\n  }\n};\n\n// Get user profile\nexport const getUserProfile = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/profile/`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get user profile');\n    }\n    return await response.json();\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Refresh token\nexport const refreshToken = async () => {\n  try {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n    const response = await fetch(`${API_BASE_URL}/token/refresh/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        refresh: refreshToken\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error('Token refresh failed');\n    }\n\n    // Update stored tokens\n    localStorage.setItem('access_token', data.access);\n    localStorage.setItem('refresh_token', data.refresh);\n    return data;\n  } catch (error) {\n    // If refresh fails, logout user\n    logout();\n    throw error;\n  }\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('access_token');\n  return !!token;\n};\n\n// Get current user\nexport const getCurrentUser = () => {\n  const user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null;\n};","map":{"version":3,"names":["API_BASE_URL","getAuthHeaders","token","localStorage","getItem","login","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","error","setItem","access","refresh","user","register","userData","logout","refreshToken","console","removeItem","getUserProfile","isAuthenticated","getCurrentUser","parse"],"sources":["C:/Users/Administrator/Desktop/edtech/django/react/src/api/auth.js"],"sourcesContent":["const API_BASE_URL = 'http://127.0.0.1:8000/api';\r\n\r\n// Helper function to get auth headers\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('access_token');\r\n  return {\r\n    'Content-Type': 'application/json',\r\n    ...(token && { 'Authorization': `Bearer ${token}` })\r\n  };\r\n};\r\n\r\n// Login API\r\nexport const login = async (email, password) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/login/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Login failed');\r\n    }\r\n\r\n    // Store tokens\r\n    localStorage.setItem('access_token', data.access);\r\n    localStorage.setItem('refresh_token', data.refresh);\r\n    localStorage.setItem('user', JSON.stringify(data.user));\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Register API\r\nexport const register = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/register/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Registration failed');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Logout API\r\nexport const logout = async () => {\r\n  try {\r\n    const refreshToken = localStorage.getItem('refresh_token');\r\n    \r\n    if (refreshToken) {\r\n      await fetch(`${API_BASE_URL}/logout/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ refresh: refreshToken }),\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Logout error:', error);\r\n  } finally {\r\n    // Clear local storage regardless of API call success\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n    localStorage.removeItem('user');\r\n  }\r\n};\r\n\r\n// Get user profile\r\nexport const getUserProfile = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/profile/`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders(),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to get user profile');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Refresh token\r\nexport const refreshToken = async () => {\r\n  try {\r\n    const refreshToken = localStorage.getItem('refresh_token');\r\n    \r\n    if (!refreshToken) {\r\n      throw new Error('No refresh token available');\r\n    }\r\n\r\n    const response = await fetch(`${API_BASE_URL}/token/refresh/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ refresh: refreshToken }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Token refresh failed');\r\n    }\r\n\r\n    // Update stored tokens\r\n    localStorage.setItem('access_token', data.access);\r\n    localStorage.setItem('refresh_token', data.refresh);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    // If refresh fails, logout user\r\n    logout();\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Check if user is authenticated\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('access_token');\r\n  return !!token;\r\n};\r\n\r\n// Get current user\r\nexport const getCurrentUser = () => {\r\n  const user = localStorage.getItem('user');\r\n  return user ? JSON.parse(user) : null;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}