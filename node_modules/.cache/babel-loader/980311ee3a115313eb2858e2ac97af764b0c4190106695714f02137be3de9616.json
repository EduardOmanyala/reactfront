{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\edtech\\\\django\\\\react\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { login as loginAPI, logout as logoutAPI, refreshToken as refreshTokenAPI, getUserProfile, isAuthenticated as checkAuth, getCurrentUser } from '../api/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Initialize auth state on app load\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n\n  // Set up automatic token refresh\n  useEffect(() => {\n    if (isAuthenticated) {\n      const refreshInterval = setInterval(() => {\n        refreshToken();\n      }, 14 * 60 * 1000); // Refresh every 14 minutes (tokens typically last 15 minutes)\n\n      return () => clearInterval(refreshInterval);\n    }\n  }, [isAuthenticated]);\n  const initializeAuth = async () => {\n    try {\n      setLoading(true);\n\n      // Check if user is authenticated\n      const authenticated = checkAuth();\n      setIsAuthenticated(authenticated);\n      if (authenticated) {\n        // Get current user from localStorage or fetch from API\n        const currentUser = getCurrentUser();\n        if (currentUser) {\n          setUser(currentUser);\n        } else {\n          // If no user in localStorage, fetch from API\n          try {\n            const userProfile = await getUserProfile();\n            setUser(userProfile);\n            localStorage.setItem('user', JSON.stringify(userProfile));\n          } catch (error) {\n            console.error('Failed to fetch user profile:', error);\n            // If we can't fetch user profile, logout\n            await logout();\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      await logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const response = await loginAPI(email, password);\n      setUser(response.user);\n      setIsAuthenticated(true);\n      return response;\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      await logoutAPI();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n  const refreshToken = async () => {\n    try {\n      const response = await refreshTokenAPI();\n\n      // Update user if needed\n      if (response.user) {\n        setUser(response.user);\n        localStorage.setItem('user', JSON.stringify(response.user));\n      }\n      return response;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      // If refresh fails, logout user\n      await logout();\n      throw error;\n    }\n  };\n  const updateUser = userData => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    refreshToken,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"IZja/rYxMfdrDJzYcGoGecx9cBo=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","login","loginAPI","logout","logoutAPI","refreshToken","refreshTokenAPI","getUserProfile","isAuthenticated","checkAuth","getCurrentUser","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","setIsAuthenticated","initializeAuth","refreshInterval","setInterval","clearInterval","authenticated","currentUser","userProfile","localStorage","setItem","JSON","stringify","error","console","email","password","response","updateUser","userData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/edtech/django/react/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { \r\n  login as loginAPI, \r\n  logout as logoutAPI, \r\n  refreshToken as refreshTokenAPI,\r\n  getUserProfile,\r\n  isAuthenticated as checkAuth,\r\n  getCurrentUser\r\n} from '../api/auth';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Initialize auth state on app load\r\n  useEffect(() => {\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // Set up automatic token refresh\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      const refreshInterval = setInterval(() => {\r\n        refreshToken();\r\n      }, 14 * 60 * 1000); // Refresh every 14 minutes (tokens typically last 15 minutes)\r\n\r\n      return () => clearInterval(refreshInterval);\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  const initializeAuth = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Check if user is authenticated\r\n      const authenticated = checkAuth();\r\n      setIsAuthenticated(authenticated);\r\n\r\n      if (authenticated) {\r\n        // Get current user from localStorage or fetch from API\r\n        const currentUser = getCurrentUser();\r\n        if (currentUser) {\r\n          setUser(currentUser);\r\n        } else {\r\n          // If no user in localStorage, fetch from API\r\n          try {\r\n            const userProfile = await getUserProfile();\r\n            setUser(userProfile);\r\n            localStorage.setItem('user', JSON.stringify(userProfile));\r\n          } catch (error) {\r\n            console.error('Failed to fetch user profile:', error);\r\n            // If we can't fetch user profile, logout\r\n            await logout();\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Auth initialization error:', error);\r\n      await logout();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await loginAPI(email, password);\r\n      \r\n      setUser(response.user);\r\n      setIsAuthenticated(true);\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await logoutAPI();\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n    }\r\n  };\r\n\r\n  const refreshToken = async () => {\r\n    try {\r\n      const response = await refreshTokenAPI();\r\n      \r\n      // Update user if needed\r\n      if (response.user) {\r\n        setUser(response.user);\r\n        localStorage.setItem('user', JSON.stringify(response.user));\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('Token refresh failed:', error);\r\n      // If refresh fails, logout user\r\n      await logout();\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateUser = (userData) => {\r\n    setUser(userData);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    login,\r\n    logout,\r\n    refreshToken,\r\n    updateUser\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}